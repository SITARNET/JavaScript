// Интерфейсные события

// Здесь мы изучим основные события пользовательского интерфейса и как с ними работать.

// 1. Основы событий мыши
// 2. Движение мыши: mouseover/out, mouseenter/leave
// 3. Drag'n'Drop с событиями мыши
// 4. Клавиатура: keydown и keyup
// 5. События указателя
// 6. Прокрутка

// Основы событий мыши

// В этой главе мы более детально рассмотрим события мыши и их свойства.

//     Сразу заметим: эти события бывают не только из-за мыши, но и эмулируются на других устройствах, в частности, на мобильных, для совместимости.

//     Типы событий мыши

// Мы можем разделить события мыши на две категории: «простые» и «комплексные».

// Простые события
// Самые часто используемые простые события:

//     mousedown/mouseup
// Кнопка мыши нажата/отпущена над элементом.
//     mouseover/mouseout
// Курсор мыши появляется над элементом и уходит с него.
//     mousemove
// Каждое движение мыши над элементом генерирует это событие.
//     contextmenu
// Вызывается при попытке открытия контекстного меню, как правило, нажатием правой кнопки мыши. Но, заметим, это не
// совсем событие мыши, оно может вызываться и специальной клавишей клавиатуры.
// …Есть также несколько иных типов событий, которые мы рассмотрим позже.

// Комплексные события

// click
// Вызывается при mousedown , а затем mouseup над одним и тем же элементом, если использовалась левая кнопка мыши.
// dblclick
// Вызывается двойным кликом на элементе.
// Комплексные события состоят из простых, поэтому в теории мы могли бы без них обойтись. Но хорошо, что они существуют,
// потому что работать с ними очень удобно.

// Порядок событий

// Одно действие может вызвать несколько событий.
// Например, клик мышью вначале вызывает mousedown, когда кнопка нажата, затем mouseup и click, когда она отпущена.
// В случае, когда одно действие инициирует несколько событий, порядок их выполнения фиксирован. То есть обработчики
// событий вызываются в следующем порядке: mousedown → mouseup → click.
// Кликните на кнопку ниже, и вы увидите события. Также попробуйте двойной клик.
// В окне теста ниже все события мыши записываются, и если задержка между ними более 1 секунды,
// то они разделяются горизонтальной чертой.
// При этом мы также можем увидеть свойство which, которое позволяет определить, какая кнопка мыши была нажата.

// Получение информации о кнопке: which
// События, связанные с кликом, всегда имеют свойство which, которое позволяет определить нажатую кнопку мыши.
//
// Это свойство не используется для событий click и contextmenu, поскольку первое происходит только при нажатии левой
// кнопкой мыши, а второе – правой.
//
// Но если мы отслеживаем mousedown и mouseup, то оно нам нужно, потому что эти события срабатывают на любой кнопке,
// и which позволяет различать между собой «нажатие правой кнопки» и «нажатие левой кнопки».
//
// Есть три возможных значения:
//
// event.which == 1 – левая кнопка
// event.which == 2 – средняя кнопка
// event.which == 3 – правая кнопка
// Средняя кнопка сейчас – скорее экзотика, и используется очень редко.

// Модификаторы: shift, alt, ctrl и meta
// Все события мыши включают в себя информацию о нажатых клавишах-модификаторах.

// Свойства объекта события:

// shiftKey: Shift
// altKey: Alt (или Opt для Mac)
// ctrlKey: Ctrl
// metaKey: Cmd для Mac
// Они равны true, если во время события была нажата соответствующая клавиша.

// Например, кнопка внизу работает только при комбинации Alt+Shift+клик:

button.onclick = function(event) {
    if (event.altKey && event.shiftKey) {
        alert('Ура!');
    }
};

// Внимание: обычно на Mac используется клавиша Cmd вместо Ctrl
// В Windows и Linux клавишами-модификаторами являются Alt, Shift и Ctrl. На Mac есть ещё одна: Cmd, которой соответствует
// свойство metaKey.
// В большинстве приложений, когда в Windows/Linux используется Ctrl, на Mac используется Cmd.
// То есть, когда пользователь Windows нажимает Ctrl+Enter и Ctrl+A, пользователь Mac нажимает Cmd+Enter или Cmd+A, и так далее.
// Поэтому, если мы хотим поддерживать такие комбинации, как Ctrl+клик, то для Mac имеет смысл использовать Cmd+клик. Это
// удобней для пользователей Mac.
// Даже если мы и хотели бы заставить людей на Mac использовать именно Ctrl+клик, это довольно сложно. Проблема в том,
// что левый клик в сочетании с Ctrl интерпретируется как правый клик на MacOS и генерирует событие contextmenu,
// а не click как на Windows/Linux.
// Поэтому, если мы хотим, чтобы пользователям всех операционных систем было удобно, то вместе с ctrlKey нам нужно
// проверять metaKey.
// Для JS-кода это означает, что мы должны проверить if (event.ctrlKey || event.metaKey).
// Не забывайте про мобильные устройства
// Комбинации клавиш на клавиатуре – это хорошее дополнение к рабочему процессу.
// Если у пользователя есть клавиатура – они работают. Ну а если на его устройстве её нет – должен быть другой
// способ сделать то же самое.